# -*- coding: utf-8 -*-

"""
typecombinatormoderate

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from typing import Literal, Dict, Any
from typing import List, Optional, Union

from datetime import date, datetime

from apimatic_core.utilities.api_helper import ApiHelper
from apimatic_core.utilities.datetime_helper import DateTimeHelper
from pydantic import AliasChoices, Field, model_serializer, BeforeValidator, PlainSerializer, model_validator
from pydantic_core.core_schema import SerializerFunctionWrapHandler
from pydantic import BaseModel
from typing_extensions import Annotated

from tests.apimatic_core.mocks.models.days import Days


class Person(BaseModel):

    """Implementation of the 'Person' model.

    TODO: type model description here.

    Attributes:
        address (str): TODO: type description here.
        age (long|int): TODO: type description here.
        birthday (date): TODO: type description here.
        birthtime (datetime): TODO: type description here.
        name (str): TODO: type description here.
        uid (str): TODO: type description here.
        person_type (str): TODO: type description here.

    """

    class Config:
        use_enum_values = True  # Ensures JSON serialization uses enum values, not names

    address: Annotated[
        str,
        Field(validation_alias=AliasChoices("address", "address"),
              serialization_alias="address")
    ]
    age: Annotated[
        int,
        Field(validation_alias=AliasChoices("age", "age"),
              serialization_alias="age")
    ]
    birthday: Annotated[
        date,
        Field(validation_alias=AliasChoices("birthday", "birthday"),
              serialization_alias="birthday"),
        PlainSerializer(lambda v: v.isoformat(), return_type=str)
    ]

    birthtime: Annotated[
        datetime,
        Field(validation_alias=AliasChoices("birthtime", "birthtime"),
              serialization_alias="birthtime"),
        BeforeValidator(DateTimeHelper.try_parse_from_rfc3339_date_time),
        PlainSerializer(DateTimeHelper.to_rfc3339_date_time, when_used='unless-none')
    ]
    name: Annotated[
        str,
        Field(validation_alias=AliasChoices("name", "name"),
              serialization_alias="name")
    ]
    uid: Annotated[
        str,
        Field(validation_alias=AliasChoices("uid", "uid"),
              serialization_alias="uid")
    ]
    person_type: Annotated[
        Union[Literal["Per"], Literal["Empl"], Literal["Post"]],
        Field(validation_alias=AliasChoices("person_type", "personType"),
              serialization_alias="personType")
    ]
    additional_properties: Optional[Dict[str, Any]] = None

    @model_validator(mode="before")
    def populate_additional_properties(cls, values: Dict[str, Any]) -> Dict[str, Any]:
        """
        Collect all extra fields and move them into `additional_properties`.
        Raise ValueError if an additional property has a name similar to a model property.

        Args:
            values (Dict[str, Any]): The input data for the model.

        Returns:
            Dict[str, Any]: The modified data with additional properties populated.
        """
        additional_props_field = "additional_properties"

        if isinstance(values.get(additional_props_field), dict):
            ApiHelper.check_conflicts_with_additional_properties(
                cls, values.get(additional_props_field), additional_props_field)
            return values

        aliases = [field.serialization_alias or name for name, field in cls.model_fields.items()]

        additional_properties = {
            key: value for key, value in values.items() if key not in aliases
        }

        ApiHelper.check_conflicts_with_additional_properties(cls, additional_properties, additional_props_field)

        values[additional_props_field] = additional_properties
        return values

    @model_serializer(mode="wrap")
    def serialize_model(self, nxt: SerializerFunctionWrapHandler):
        _optional_fields = {"additional_properties"}
        serialized_model = nxt(self)
        additional_properties = serialized_model.pop("additional_properties", {})
        sanitized_model = ApiHelper.sanitize_model(
            optional_fields=_optional_fields, model_dump=serialized_model,
            model_fields=self.model_fields, model_fields_set=self.model_fields_set)

        return {**sanitized_model, **(additional_properties or {})}

class Employee(Person):

    """Implementation of the 'Employee' model.

    TODO: type model description here.
    NOTE: This class inherits from 'Person'.

    Attributes:
        department (str): TODO: type description here.
        dependents (List[Person]): TODO: type description here.
        hired_at (datetime): TODO: type description here.
        joining_day (DaysEnum): TODO: type description here.
        salary (int): TODO: type description here.
        working_days (List[DaysEnum]): TODO: type description here.
        boss (Person): TODO: type description here.

    """

    department: Annotated[
        str,
        Field(validation_alias=AliasChoices("department", "department"),
              serialization_alias="department"),
    ]
    dependents: Annotated[
        List[Person],
        Field(validation_alias=AliasChoices("dependents", "dependents"),
              serialization_alias="dependents"),
    ]
    hired_at: Annotated[
        datetime,
        Field(validation_alias=AliasChoices("hired_at", "hiredAt"),
              serialization_alias="hiredAt"),
        BeforeValidator(DateTimeHelper.try_parse_from_rfc1123_date_time),
        PlainSerializer(DateTimeHelper.to_rfc1123_date_time, when_used='unless-none')
    ]
    joining_day: Annotated[
        Optional[Days],
        Field(validation_alias=AliasChoices("joining_day", "joiningDay"),
              serialization_alias="joiningDay")
    ] = Days.MONDAY
    salary: Annotated[
        int,
        Field(validation_alias=AliasChoices("salary", "salary"),
              serialization_alias="salary")
    ]
    working_days: Annotated[
        List[Days],
        Field(validation_alias=AliasChoices("working_days", "workingDays"),
              serialization_alias="workingDays")
    ]
    boss: Annotated[
        Optional[Person],
        Field(validation_alias=AliasChoices("boss", "boss"),
              serialization_alias="boss")
    ] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, nxt: SerializerFunctionWrapHandler):
        _nullable_fields = {"boss"}
        _optional_fields = {"boss", "joining_day", "additional_properties"}

        serialized_model = nxt(self)
        additional_properties = serialized_model.pop("additional_properties", {})
        sanitized_model = ApiHelper.sanitize_model(
            nullable_fields=_nullable_fields, optional_fields=_optional_fields,
            model_dump=serialized_model, model_fields=self.model_fields,
            model_fields_set=self.model_fields_set)

        return {**sanitized_model, **(additional_properties or {})}
