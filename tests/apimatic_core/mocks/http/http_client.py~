from typing import Any

from apimatic_core_interfaces.configuration.endpoint_configuration import EndpointConfiguration
from apimatic_core_interfaces.http.http_client import HttpClient
from apimatic_core_interfaces.http.http_request import HttpRequest
from apimatic_core_interfaces.http.http_response import HttpResponse
from pydantic import validate_call


class MockHttpClient(HttpClient):

    should_retry: bool = False
    contains_binary_response: bool = False

    @validate_call
    def execute(self, request: HttpRequest, endpoint_configuration: EndpointConfiguration = None) -> HttpResponse:
        """Execute a given CoreHttpRequest to get a string response back

        Args:
            request (HttpRequest): The given HttpRequest to execute.
            endpoint_configuration (EndpointConfiguration): The endpoint configurations to use.

        Returns:
            HttpResponse: The response of the CoreHttpRequest.

        """
        self.should_retry = endpoint_configuration.should_retry
        self.contains_binary_response = endpoint_configuration.has_binary_response
        return self.convert_response(None, self.contains_binary_response, request)

    @validate_call
    def convert_response(
            self, response: Any, contains_binary_response: bool, request: HttpRequest
    ) -> HttpResponse:
        """Converts the Response object of the CoreHttpClient into an
        CoreHttpResponse object.

        Args:
            response (dynamic): The original response object.
            contains_binary_response (bool): The flag to check if the response is of binary type.
            request (HttpRequest): The original HttpRequest object.

        Returns:
            CoreHttpResponse: The converted CoreHttpResponse object.

        """
        return HttpResponse(
            status_code=200,
            reason_phrase=None,
            headers=request.headers,
            text=str(request.parameters),
            request=request)
