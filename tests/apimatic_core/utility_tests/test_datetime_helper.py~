from datetime import date
from typing import Union, Optional

import pytest
from pydantic import validate_call

from apimatic_core.utilities.datetime_helper import DateTimeHelper


class TestDateTimeHelper:

    @pytest.mark.parametrize('input_dt, input_datetime_format, expected_output', [
        ('1994-11-06T08:49:37', DateTimeFormat.RFC3339_DATE_TIME, True),
        ('1994-02-13T14:01:54.656647Z', DateTimeFormat.RFC3339_DATE_TIME, True),
        ('Sun, 06 Nov 1994 03:49:37 GMT', DateTimeFormat.HTTP_DATE_TIME, True),
        (1480809600, DateTimeFormat.UNIX_DATE_TIME, True),
        ('1994-11-06T08:49:37', DateTimeFormat.HTTP_DATE_TIME, False),
        (1480809600, DateTimeFormat.HTTP_DATE_TIME, False),
        ('Sun, 06 Nov 1994 03:49:37 GMT', DateTimeFormat.RFC3339_DATE_TIME, False),
        (1480809600, DateTimeFormat.RFC3339_DATE_TIME, False),
        ('1994-11-06T08:49:37', DateTimeFormat.UNIX_DATE_TIME, False),
        ('Sun, 06 Nov 1994 03:49:37 GMT', DateTimeFormat.UNIX_DATE_TIME, False),
        ('Sun, 06 Nov 1994 03:49:37 GMT', None, False)
    ])
    @validate_call
    def test_is_valid_datetime(
            self, input_dt: Union[str, int, float], input_datetime_format: Optional[DateTimeFormat],
            expected_output: bool
    ):
        actual_output = DateTimeHelper.validate_datetime(input_dt, input_datetime_format)

        assert actual_output == expected_output

    @pytest.mark.parametrize('input_date, expected_output', [
        ('1994-11-06', True),
        (date(1994, 11, 6), True),
        (date(94, 11, 6), True),
        ('1994/11/06', False),
        ('19941106', False),
        ('941106', False),
        ('1941106', False),
        ('1994=11=06', False)
    ])
    @validate_call
    def test_is_valid_date(self, input_date: Union[date, str], expected_output: bool):
        actual_output = DateTimeHelper.validate_date(input_date)
        assert actual_output == expected_output

    # Valid RFC 1123 datetime string returns True
    @validate_call
    def test_valid_rfc1123_datetime_returns_true(self):
        datetime_str = "Sun, 06 Nov 1994 08:49:37 GMT"

        # Assert that valid RFC 1123 string returns True
        assert DateTimeHelper.is_rfc_1123(datetime_str) is True

    # Empty string input returns False
    @validate_call
    def test_empty_rfc1123_string_returns_false(self):
        datetime_str = ""

        # Assert that empty string returns False
        assert DateTimeHelper.is_rfc_1123(datetime_str) is False

    # Valid RFC 3339 datetime string without milliseconds returns true
    @validate_call
    def test_valid_rfc3339_datetime_without_ms_returns_true(self):
        datetime_str = "2023-12-25T10:30:00"
        result = DateTimeHelper.is_rfc_3339(datetime_str)

        # Assert
        assert result is True

    # Empty string input returns false
    @validate_call
    def test_empty_rfc3339_string_returns_false(self):
        datetime_str = ""
        result = DateTimeHelper.is_rfc_3339(datetime_str)

        assert result is False

    # Valid integer Unix timestamp returns True
    @validate_call
    def test_valid_integer_timestamp_returns_true(self):
        # Current timestamp
        timestamp = 1672531200
        result = DateTimeHelper.is_unix_timestamp(timestamp)
        assert result is True

    # Zero timestamp returns True
    @validate_call
    def test_zero_timestamp_returns_true(self):
        timestamp = 0
        result = DateTimeHelper.is_unix_timestamp(timestamp)
        assert result is True

    # Timestamp string with whitespace returns False
    @validate_call
    def test_timestamp_string_with_whitespace_returns_false(self):
        timestamp = ""
        result = DateTimeHelper.is_unix_timestamp(timestamp)
        assert result is False


