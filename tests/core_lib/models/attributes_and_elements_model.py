# -*- coding: utf-8 -*-

"""
testerxml

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from core_lib.utilities.xml_utilities import XmlUtilities


class AttributesAndElementsModel(object):

    """Implementation of the 'AttributesAndElements' model.

    TODO: type model description here.

    Attributes:
        string_attr (string): string attribute (attribute name "string")
        number_attr (int): number attribute (attribute name "number")
        string_element (string): string element (element name "string")
        number_element (int): number element (element name "number")

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "string_attr": 'string-attr',
        "number_attr": 'number-attr',
        "string_element": 'string-element',
        "number_element": 'number-element'
    }

    def __init__(self,
                 string_attr=None,
                 number_attr=None,
                 string_element=None,
                 number_element=None):
        """Constructor for the AttributesAndElementsModel class"""

        # Initialize members of the class
        self.string_attr = string_attr 
        self.number_attr = number_attr 
        self.string_element = string_element 
        self.number_element = number_element 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        string_attr = dictionary.get("string-attr") if dictionary.get("string-attr") else None
        number_attr = dictionary.get("number-attr") if dictionary.get("number-attr") else None
        string_element = dictionary.get("string-element") if dictionary.get("string-element") else None
        number_element = dictionary.get("number-element") if dictionary.get("number-element") else None
        # Return an object of this model
        return cls(string_attr,
                   number_attr,
                   string_element,
                   number_element)

    @classmethod
    def from_element(cls, root):
        """Initialize an instance of this class using an xml.etree.Element.

        Args:
            root (string): The root xml element.

        Returns:
            object: An instance of this class.

        """
        string_attr = XmlUtilities.value_from_xml_attribute(root.get('string'), str)
        number_attr = XmlUtilities.value_from_xml_attribute(root.get('number'), int)
        string_element = XmlUtilities.value_from_xml_element(root.find('string'), str)
        number_element = XmlUtilities.value_from_xml_element(root.find('number'), int)

        return cls(string_attr,
                   number_attr,
                   string_element,
                   number_element)

    def to_xml_sub_element(self, root):
        """Convert this object to an instance of xml.etree.Element.

        Args:
            root (xml.etree.Element): The parent of this xml element.
        """
        XmlUtilities.add_as_attribute(root, self.string_attr, 'string')
        XmlUtilities.add_as_attribute(root, self.number_attr, 'number')
        XmlUtilities.add_as_subelement(root, self.string_element, 'string')
        XmlUtilities.add_as_subelement(root, self.number_element, 'number')
